/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

"use strict";

var fs = require("fs");
var express = require("express");
var app = express();
const util = require("util");
const GoogleImages = require('google-images');
const client = new GoogleImages('012519415796029049938:ds6humxqfrm', 'AIzaSyCxSr4m65m0hUnRHq0wLSScS-ovYVv-t9A');
var pretty = require('express-prettify');
const admin = require('firebase-admin');
var serviceAccount = require('./firebase.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
var db = admin.firestore();

app.use(pretty({ query: 'pretty' }));


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = [
      "https://narrow-plane.gomix.me",
      "https://www.freecodecamp.com"
    ];
    var origin = req.headers.origin || "*";
    if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(origin);
      res.setHeader("Access-Control-Allow-Origin", origin);
      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
      );
    }
    next();
  });
}

app.use("/public", express.static(process.cwd() + "/public"));

app.route("/_api/package.json").get(function(req, res, next) {
  console.log("requested");
  fs.readFile(__dirname + "/package.json", function(err, data) {
    if (err) return next(err);
    res.type("txt").send(data.toString());
  });
});

app.route("/").get(function(req, res) {
  res.sendFile(process.cwd() + "/views/index.html");
});

app.route('/:searchTerm')
  .get((req, res) => {
    const { params: { searchTerm }} = req;
    const searchesRef = db.collection('recent_searches');
    const page = req.query.offset || 1;
  
    searchesRef.add({
      term: searchTerm,
      date: new Date()
    }).then(ref => {
      console.log('Added document with ID: ', ref.id);
    }).catch(err => {
      console.error(err);
    });;
  
    client.search(searchTerm, { page })
      .then(images => {
        res.json(images);
      });
  });

app.route('/api/recent')
  .get((req, res) => {
    const searchesRef = db.collection('recent_searches');
    searchesRef.orderBy('date').limit(10);
    searchesRef.get()
      .then(snapshot => {
        const searches =[];
        snapshot.forEach(doc => searches.push({ ...doc.data() }));
        res.json({ searches });
    });
  });

// Respond not found to all the wrong routes
app.use(function(req, res, next) {
  res.status(404);
  res.type("txt").send("Not found");
});

// Error Middleware
app.use(function(err, req, res, next) {
  if (err) {
    res
      .status(err.status || 500)
      .type("txt")
      .send(err.message || "SERVER ERROR");
  }
});

app.listen(process.env.PORT, function() {
  console.log("Node.js listening ...");
});
